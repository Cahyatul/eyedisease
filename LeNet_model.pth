import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torch.utils.data import DataLoader
from torchvision import datasets, transforms

# =========================
# 1. Definisi Model
# =========================
class ModifiedLeNet(nn.Module):
    def __init__(self, num_classes=4):
        super(ModifiedLeNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 6, kernel_size=5)
        self.conv2 = nn.Conv2d(6, 16, kernel_size=5)
        self.conv3 = nn.Conv2d(16, 32, kernel_size=3)

        self.dropout_conv = nn.Dropout2d(0.25)
        self.dropout_fc = nn.Dropout(0.5)

        self.fc1 = nn.Linear(32 * 29 * 29, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, num_classes)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = F.max_pool2d(x, 2)
        x = self.dropout_conv(x)

        x = F.relu(self.conv2(x))
        x = F.max_pool2d(x, 2)
        x = self.dropout_conv(x)

        x = F.relu(self.conv3(x))
        x = F.max_pool2d(x, 2)
        x = self.dropout_conv(x)

        x = x.view(-1, 32 * 29 * 29)
        x = F.relu(self.fc1(x))
        x = self.dropout_fc(x)

        x = F.relu(self.fc2(x))
        x = self.dropout_fc(x)

        x = self.fc3(x)
        return x

# =========================
# 2. Dataset & Transform
# =========================
transform = transforms.Compose([
    transforms.Resize((256, 256)),  # resize sesuai input
    transforms.ToTensor()
])

# Contoh: folder dataset
# dataset/
#   ├── train/
#   │   ├── Normal/
#   │   ├── Diabetic Retinopathy/
#   │   ├── Cataract/
#   │   └── Glaucoma/
#   └── test/
train_dataset = datasets.ImageFolder(root="dataset/train", transform=transform)
test_dataset = datasets.ImageFolder(root="dataset/test", transform=transform)

train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=16, shuffle=False)

# =========================
# 3. Training Setup
# =========================
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = ModifiedLeNet(num_classes=4).to(device)

criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

# =========================
# 4. Training Loop
# =========================
epochs = 10
for epoch in range(epochs):
    model.train()
    running_loss = 0.0
    for images, labels in train_loader:
        images, labels = images.to(device), labels.to(device)

        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()

    print(f"Epoch [{epoch+1}/{epochs}], Loss: {running_loss/len(train_loader):.4f}")

# =========================
# 5. Save Model
# =========================
torch.save(model.state_dict(), "lenet_model.pth")
print("Model saved as lenet_model.pth")
